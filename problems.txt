turning currentorders into a struct rather than it being a class

using a struct of a month start and end, which allows me to return two values from the get ordertime function
this also allows me to store the start and end times that are available in one vector

I didn't define the constructors in the structs

instead of passing a value from method to method, I have made one global variable of a struct that can be edited by each method until 
the end where it gets pushed on to the end of a vector as an order

When getting the start date of a user's order, I started with asking them what interval they wanted to order for. I then asked for their end date.
(assuming that they wanted the first month from the interval they choose) This method was obviously wrong so I needed a way to set the date of each 
time stamp, and ask the user what date they wanted from the interval they choose.

I will set the date of each time stamp to take their respective date at the start of the program.
This way, when outputting order values, it does not need to do any computations, it just outputs a string that it was assigned 
to at the start of the program. The time will be stored in a mm/yyyy format

cin.get skips, fixed with cin.ignore()
https://cboard.cprogramming.com/cplusplus-programming/80399-why-doesnt-cin-get-pause-program.html

To get the datetime to work, I had to use <ctime> which tells the date since 1900. This means that 
the year needs to have 1900 added onto it. The month also needed 1 added to it so that it would be 1 based

Interval algorithm, when testing revealed that there were some errors.
The wrong number was being set as the end number, and if a mid interval was found
it would not search further to the end if there was no other intervals.
(The variable holding if the end was found did not get reset, so it wouuld never register the last interval
if there were intervals already found)

When taking a number input, I wanted to make sure that the input was numerical. A few of the methods I used led to
some problems, where the loop that tried to take an input would skip the input part. This was due to the \n special character
still being stored in the cache of std::cin. To combat this, I would use cin.fail() to check if the cin was not able to 
put the input into the variable (input was not numerical), and then cin.clear() and cin.ignore() to clear the cache

Name testing done to check what happens if the user inputs a \n in their name. This seems to work just fine
